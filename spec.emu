<pre class="metadata">
title: String.prototype.matchAll
stage: 1
contributors: Jordan Harband
</pre>
<emu-clause id="String.prototype.matchAll">
	<h1>String.prototype.matchAll ( _regexp_ )</h1>
	<p>When the _matchAll_ method is called, the following steps are taken:</p>
	<emu-alg>
		1. Let _O_ be ? RequireObjectCoercible(*this* value).
		1. If _regexp_ is neither *undefined* nor *null*, then
			1. Let _matcher_ be ? GetMethod(_regexp_, @@matchAll).
			1. If _matcher_ is not *undefined*, then
				1. Return ? Call(_matcher_, _regexp_, &laquo; _O_ &raquo;).
		1. Let _S_ be ? ToString(_O_).
		1. Let _rx_ be ? RegExpCreate(_regexp_, *undefined*).
		1. Return ? Invoke(_rx_, @@matchAll, &laquo; _S_ &raquo;).
	</emu-alg>
	<emu-note>Similarly to String.prototype.split, String.prototype.matchAll is designed to typically act without mutating its inputs.</emu-note>
</emu-clause>

<emu-clause id="RegExp.prototype[@@matchAll]">
	<h1>RegExp.prototype [ @@matchAll ] ( _string_ )</h1>
	<p>When the `@@matchAll` method is called, the following steps are taken:</p>
	<emu-alg>
		1. Let _rx_ be the *this* value.
		1. If Type(_rx_) is not Object, throw a *TypeError* exception.
		1. Let _S_ be ? ToString(_string_).
		1. Let _C_ be ? SpeciesConstructor(_rx_, %RegExp%).
		1. Let _flags_ be ? ToString(? Get(_rx_, `"flags"`)).
		1. Let _matcher_ be ? Construct(_C_, &laquo; _rx_, _flags_ &raquo;).
		1. Let _lastIndex_ be ? ToLength(? Get(_rx_, *"lastIndex"*)).
		1. Perform ? Set(_matcher_, *"lastIndex"*, _lastIndex_, *true*).
		1. Return CreateRegExpStringIterator(_matcher_, _S_)
	</emu-alg>
</emu-clause>

<emu-clause id="CreateRegExpStringIterator">
	<h1>CreateRegExpStringIterator ( _R_, _S_ )</h1>

	<p>The abstract operation _CreateRegExpStringIterator_ is used to create such iterator objects. It performs the following steps:</p>
	<emu-alg>
		1. Assert: Type(_S_) is String.
		1. Let _iterator_ be ObjectCreate(<emu-xref href="#%RegExpStringIteratorPrototype%">%RegExpStringIteratorPrototype%</emu-xref>, «[[IteratingRegExp]], [[IteratedString]]»).
		1. Set _iterator_.[[IteratingRegExp]] to _R_.
		1. Set _iterator_.[[IteratedString]] to _S_.
		1. Return _iterator_.
	</emu-alg>
</emu-clause>

<emu-clause id="%RegExpStringIteratorPrototype%">
	<h1>The %RegExpStringIteratorPrototype% Object</h1>

	<p>All RegExp String Iterator Objects inherit properties from the <emu-xref href="#%RegExpStringIteratorPrototype%">%RegExpStringIteratorPrototype%</emu-xref> intrinsic object. The %RegExpStringIteratorPrototype% object is an ordinary object and its [[Prototype]] <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-object-internal-methods-and-internal-slots">internal slot</a> is the <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-%iteratorprototype%-object">%IteratorPrototype% intrinsic object</a>. In addition, %RegExpStringIteratorPrototype% has the following properties:</p>

	<emu-clause id="%RegExpStringIteratorPrototype%.next">
		<h1>%RegExpStringIteratorPrototype%.next ( )</h1>
		<emu-alg>
			1. Let _O_ be the *this* value.
			1. If Type(_O_) is not Object, throw a *TypeError* exception.
			1. If _O_ does not have all of the internal slots of a RegExp String Iterator Object Instance (see <emu-xref href="#PropertiesOfRegExpStringIteratorInstances"></emu-xref>), throw a *TypeError* exception.
			1. Let _R_ be _O_.[[IteratingRegExp]].
			1. Let _S_ be _O_.[[IteratedString]].
			1. Let _match_ be ? RegExpExec(_R_, _S_).
			1. If _match_ is *null*, then
				1. Return CreateIterResultObject(*null*, *true*).
			1. Otherwise,
				1. Return CreateIterResultObject(_match_, *false*).
		</emu-alg>
	</emu-clause>

	<emu-clause id="%RegExpStringIteratorPrototype%[@@toStringTag]">
		<h1>%RegExpStringIteratorPrototype%[ @@toStringTag ]</h1>
		<p>The initial value of the _@@toStringTag_ property is the String value *"RegExp String Iterator"*.</p>
		<p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *true* }.</p>
	</emu-clause>

	<emu-clause id="PropertiesOfRegExpStringIteratorInstances">
		<h1>Properties of RegExp String Iterator Instances</h1>
		<p>RegExp String Iterator instances are ordinary objects that inherit properties from the <emu-xref href="#%RegExpStringIteratorPrototype%">%RegExpStringIteratorPrototype%</emu-xref> intrinsic object. RegExp String Iterator instances are initially created with the internal slots listed in <a href="#table-1">Table 1</a>.</p>
		<figure>
			<figcaption><span id="table-1">Table 1</span> &ndash; Internal Slots of RegExp String Iterator Instances</figcaption>
			<table class="real-table">
				<tbody>
					<tr>
						<th>Internal Slot</th>
						<th>Description</th>
					</tr>
					<tr>
						<td>[[IteratingRegExp]]</td>
						<td>The regular expression used for iteration. IsRegExp([[IteratingRegExp]]) is always *true*.</td>
					</tr>
					<tr>
						<td>[[IteratedString]]</td>
						<td>The String value being iterated upon.</td>
					</tr>
				</tbody>
			</table>
		</figure>
	</emu-clause>
</emu-clause>
